#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x


PLUGIN_BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$PLUGIN_BASE_PATH/config"

if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

TRIGGER_BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$TRIGGER_BASE_PATH/functions"

main() {
  local APP="$1"
  local ACTION="$2"
  local DOMAIN="$3"
  
  local TRIGGERS_ENABLED_FILE="$PLUGIN_DATA_ROOT/TRIGGERS_ENABLED"
  if [[ ! -f "$TRIGGERS_ENABLED_FILE" ]]; then
    return 0
  fi
  
  [[ -z "$APP" ]] && return 0
  
  [[ "$ACTION" != "add" && "$ACTION" != "remove" ]] && return 0
  
  [[ -z "$DOMAIN" ]] && return 0
  
  
  if [[ "$ACTION" == "add" ]]; then
    handle_domain_add "$APP" "$DOMAIN"
  elif [[ "$ACTION" == "remove" ]]; then
    handle_domain_remove "$APP" "$DOMAIN"
  fi
}

handle_domain_add() {
  local APP="$1"
  local DOMAIN="$2"
  
  dokku_log_info1 "DNS: Domain '$DOMAIN' added to app '$APP', checking DNS setup"
  
  local app_was_managed=false
  if is_app_dns_managed "$APP"; then
    app_was_managed=true
  fi
  
  if dns_add_app_domains "$APP" "$DOMAIN"; then
    if [[ "$app_was_managed" == "false" ]]; then
      dokku_log_info1 "DNS: App '$APP' added to DNS management"
    fi
    dokku_log_info1 "DNS: Domain '$DOMAIN' added to DNS tracking"
    
    dokku_log_info1 "DNS: Syncing DNS records for '$APP'..."
    if command -v dokku >/dev/null 2>&1; then
      if dokku "$PLUGIN_COMMAND_PREFIX:sync" "$APP" >/dev/null 2>&1; then
        dokku_log_info1 "DNS: Domain '$DOMAIN' DNS records synced successfully"
      else
        dokku_log_warn "DNS: Failed to sync DNS records automatically"
        dokku_log_info1 "DNS: Manual sync with: dokku $PLUGIN_COMMAND_PREFIX:sync $APP"
      fi
    else
      dokku_log_info1 "DNS: Manual sync with: dokku $PLUGIN_COMMAND_PREFIX:sync $APP"
    fi
  else
    dokku_log_warn "DNS: Failed to add domain '$DOMAIN' to DNS management"
  fi
}

handle_domain_remove() {
  local APP="$1"
  local DOMAIN="$2"
  
  dokku_log_info1 "DNS: Domain '$DOMAIN' removed from app '$APP', updating DNS tracking..."
  
  if ! is_app_dns_managed "$APP"; then
    return 0
  fi
  
  local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$APP/DOMAINS"
  if [[ -f "$APP_DOMAINS_FILE" ]]; then
    local TEMP_DOMAINS_FILE="$APP_DOMAINS_FILE.tmp"
    grep -v "^$DOMAIN$" "$APP_DOMAINS_FILE" > "$TEMP_DOMAINS_FILE" 2>/dev/null || true
    mv "$TEMP_DOMAINS_FILE" "$APP_DOMAINS_FILE"
    
    dokku_log_info1 "DNS: Domain '$DOMAIN' removed from DNS tracking"
    
    local DELETIONS_QUEUE="$PLUGIN_DATA_ROOT/PENDING_DELETIONS"
    echo "$(date '+%Y-%m-%d %H:%M:%S') post-domains-update $APP $DOMAIN" >> "$DELETIONS_QUEUE"
    
    dokku_log_info1 "DNS: Domain '$DOMAIN' queued for cleanup"
    dokku_log_info1 "DNS: Run 'dokku $PLUGIN_COMMAND_PREFIX:sync:deletions' to clean up orphaned DNS records"
    
    if [[ ! -s "$APP_DOMAINS_FILE" ]]; then
      dokku_log_info1 "DNS: App '$APP' has no domains left, removing from DNS management"
      rm -rf "${PLUGIN_DATA_ROOT:?}/${APP:?}"
      
      local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
      if [[ -f "$LINKS_FILE" ]]; then
        local TEMP_LINKS_FILE="$LINKS_FILE.tmp"
        grep -v "^$APP$" "$LINKS_FILE" > "$TEMP_LINKS_FILE" 2>/dev/null || true
        mv "$TEMP_LINKS_FILE" "$LINKS_FILE"
      fi
    fi
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi