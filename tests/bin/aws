#!/bin/bash

# Check for credential failure simulation
if [[ "${AWS_MOCK_FAIL_CREDENTIALS:-}" == "true" ]]; then
  echo "Unable to locate credentials" >&2
  exit 1
fi

# Determine control file location
control_file=""
if [[ -n "${AWS_MOCK_CONTROL_FILE:-}" ]]; then
  control_file="$AWS_MOCK_CONTROL_FILE"
elif [[ -n "${PLUGIN_DATA_ROOT:-}" ]]; then
  control_file="$PLUGIN_DATA_ROOT/aws_mock_control"
fi

case "$*" in
  "sts get-caller-identity")
    echo '{"Account":"123456789012","UserId":"AIDACKCEVSQ6C2EXAMPLE","Arn":"arn:aws:iam::123456789012:user/test"}'
    ;;
  *"get-caller-identity"*)
    echo '{"Account":"123456789012","UserId":"AIDACKCEVSQ6C2EXAMPLE","Arn":"arn:aws:iam::123456789012:user/test"}'
    ;;
  *"list-hosted-zones"*"--query"*"HostedZones[?Name=='"*"example.com."*"'].Id"*"--output text"*)
    echo "Z1234567890ABC"
    ;;
  *"list-hosted-zones"*"--query"*"HostedZones[?Name=='"*"test.org."*"'].Id"*"--output text"*)
    echo "Z0987654321DEF"
    ;;
  *"list-hosted-zones"*"--query"*"HostedZones[?Name=="*"example.com."*"].Id"*"--output text"*)
    echo "Z1234567890ABC"
    ;;
  *"list-hosted-zones"*"--query"*"HostedZones[?Name=="*"test.org."*"].Id"*"--output text"*)
    echo "Z0987654321DEF"
    ;;
  *"list-hosted-zones"*"--query"*"HostedZones[?Name=='"*"'].Id"*"--output text"*)
    # Fallback for unknown zones with single quotes - return empty (zone not found)
    echo ""
    ;;
  *"list-hosted-zones"*"--query"*"HostedZones[?Name=="*"].Id"*"--output text"*)
    # Fallback for unknown zones - return empty (zone not found)
    echo ""
    ;;
  *"list-hosted-zones --query length(HostedZones) --output text"*)
    echo "2"
    ;;
  *"list-hosted-zones --query HostedZones[0].Id --output text"*)
    echo "/hostedzone/Z1234567890ABC"
    ;;
  *"list-hosted-zones --query HostedZones[].{Zone:Name,ID:Id,Records:ResourceRecordSetCount,Type:Config.PrivateZone} --output table"*)
    echo "-------------------------------------------------------------
|                     ListHostedZones                     |
+-------------------+----------------------------+---------+
|        ID         |           Zone             | Records |
+-------------------+----------------------------+---------+
|  Z1234567890ABC   |  example.com.              |    5    |
|  Z0987654321DEF   |  test.org.                 |    3    |
+-------------------+----------------------------+---------+"
    ;;
  *"list-hosted-zones --query HostedZones[].Name --output text"*)
    echo "example.com.	test.org."
    ;;
  *"list-hosted-zones"*)
    # Return basic hosted zones list for providers:verify
    echo '{"HostedZones":[{"Id":"/hostedzone/Z1234567890ABC","Name":"example.com.","CallerReference":"test-ref-1","Config":{"PrivateZone":false,"Comment":"Test zone"},"ResourceRecordSetCount":5},{"Id":"/hostedzone/Z0987654321DEF","Name":"test.org.","CallerReference":"test-ref-2","Config":{"PrivateZone":false,"Comment":"Test zone"},"ResourceRecordSetCount":3}]}'
    ;;
  *"configure get region"*)
    echo "us-east-1"
    ;;
  *"list-resource-record-sets"*"--query"*"ResourceRecordSets"*)
    if [[ "$*" == *"Name=='"*"'"* ]]; then
      # Specific record query - return record value for deletion
      echo "192.168.1.100"
    else
      # General record scanning - return record names based on control file
      if [[ -f "$control_file" ]]; then
        record_count=$(grep "^RECORD_COUNT=" "$control_file" 2>/dev/null | cut -d= -f2)
        record_prefix=$(grep "^RECORD_PREFIX=" "$control_file" 2>/dev/null | cut -d= -f2)
        record_count=${record_count:-0}
        record_prefix=${record_prefix:-test-record}
        
        if [[ "$record_count" -gt 0 ]]; then
          # Special case: for filtering test, return both current and to-be-deleted records
          # Only return both if current-app exists (filtering test scenario)
          if [[ "$record_prefix" == "record-to-delete" ]]; then
            # Check if current-app exists to distinguish between filtering test and deletion test
            # Try multiple ways to detect if we're in the filtering test scenario
            if [[ -d "$PLUGIN_DATA_ROOT/../current-app" ]] || \
               [[ -f "$PLUGIN_DATA_ROOT/../current-app/DOMAINS" ]] || \
               dokku apps:list 2>/dev/null | grep -q "current-app"; then
              echo "current.example.com."
              echo "record-to-delete.example.com."
            else
              echo "record-to-delete.example.com."
            fi
          elif [[ "$record_prefix" == "old-app" && "$record_count" == "1" ]]; then
            # Special case for old-app test - return single record without number
            echo "old-app.example.com."
          else
            for ((i=1; i<=record_count; i++)); do
              echo "${record_prefix}-${i}.example.com."
            done
          fi
        fi
      else
        # Default behavior for backward compatibility
        echo "record-to-delete.example.com."
      fi
    fi
    ;;
  *"change-resource-record-sets"*)
    # Check if this is a test that expects failure - multiple detection methods for CI compatibility
    if [[ "${BATS_TEST_NAME:-}" == *"API failures"* ]] || \
       [[ "${BATS_TEST_DESCRIPTION:-}" == *"API failures"* ]] || \
       [[ "${AWS_MOCK_FAIL_API:-}" == "true" ]]; then
      echo "Error: Access denied" >&2
      exit 1
    else
      # Mock successful deletion
      echo '{"ChangeInfo":{"Id":"/change/C123456789","Status":"PENDING"}}'
    fi
    ;;
  *"route53 list-resource-record-sets --hosted-zone-id"*)
    # Handle record sets listing for specific zones (for providers:verify)
    if [[ "$*" == *"Z1234567890ABC"* ]]; then
      echo '{"ResourceRecordSets":[{"Name":"example.com.","Type":"A","TTL":300,"ResourceRecords":[{"Value":"192.168.1.1"}]}]}'
    elif [[ "$*" == *"Z0987654321DEF"* ]]; then
      echo '{"ResourceRecordSets":[{"Name":"test.org.","Type":"A","TTL":300,"ResourceRecords":[{"Value":"192.168.1.2"}]}]}'
    else
      echo '{"ResourceRecordSets":[]}'
    fi
    ;;
  *)
    echo "Mock AWS CLI - unexpected call: $*" >&2
    exit 1
    ;;
esac
