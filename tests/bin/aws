#!/usr/bin/env bash
# Mock AWS CLI for testing

# Set mock behavior based on commands
case "${1:-}" in
  sts)
    case "${2:-}" in
      get-caller-identity)
        echo '{"UserId":"AIDACKCEVSQ6C2EXAMPLE","Account":"123456789012","Arn":"arn:aws:iam::123456789012:user/testuser"}'
        ;;
      *)
        echo "Unknown sts command: $2" >&2
        exit 1
        ;;
    esac
    ;;
  route53)
    case "${2:-}" in
      list-hosted-zones)
        # Parse the query to see if it's looking for a specific domain
        if [[ "$*" == *"--query"* ]]; then
          if [[ "$*" == *"example.com"* ]]; then
            # Return empty for example.com queries
            echo "None"
          elif [[ "$*" == *"test1.com"* ]]; then
            # Return hosted zone for test1.com
            echo "Z1234567890ABC"
          elif [[ "$*" == *"test2.com"* ]]; then
            # Return hosted zone for test2.com  
            echo "Z0987654321XYZ"
          elif [[ "$*" == *"working.com"* ]]; then
            # Return hosted zone for working.com
            echo "Z5555555555DEF"
          else
            # Default list all hosted zones
            cat <<EOF
{
  "HostedZones": [
    {
      "Id": "/hostedzone/Z1234567890ABC",
      "Name": "test1.com.",
      "CallerReference": "test-ref-1",
      "Config": {"PrivateZone": false}
    },
    {
      "Id": "/hostedzone/Z0987654321XYZ", 
      "Name": "test2.com.",
      "CallerReference": "test-ref-2",
      "Config": {"PrivateZone": false}
    },
    {
      "Id": "/hostedzone/Z5555555555DEF",
      "Name": "working.com.",
      "CallerReference": "test-ref-3", 
      "Config": {"PrivateZone": false}
    }
  ]
}
EOF
          fi
        else
          # Default list all hosted zones
          cat <<EOF
{
  "HostedZones": [
    {
      "Id": "/hostedzone/Z1234567890ABC",
      "Name": "test1.com.",
      "CallerReference": "test-ref-1",
      "Config": {"PrivateZone": false}
    },
    {
      "Id": "/hostedzone/Z0987654321XYZ",
      "Name": "test2.com.", 
      "CallerReference": "test-ref-2",
      "Config": {"PrivateZone": false}
    },
    {
      "Id": "/hostedzone/Z5555555555DEF",
      "Name": "working.com.",
      "CallerReference": "test-ref-3",
      "Config": {"PrivateZone": false}
    }
  ]
}
EOF
        fi
        ;;
      get-hosted-zone)
        # Extract zone ID from arguments
        zone_id=""
        for arg in "$@"; do
          if [[ "$arg" == Z* ]]; then
            zone_id="$arg"
            break
          fi
        done
        
        case "$zone_id" in
          Z1234567890ABC)
            echo '{"HostedZone": {"Id": "/hostedzone/Z1234567890ABC", "Name": "test1.com."}}'
            ;;
          Z0987654321XYZ)
            echo '{"HostedZone": {"Id": "/hostedzone/Z0987654321XYZ", "Name": "test2.com."}}'
            ;;
          Z5555555555DEF)
            echo '{"HostedZone": {"Id": "/hostedzone/Z5555555555DEF", "Name": "working.com."}}'
            ;;
          *)
            echo "Zone not found" >&2
            exit 1
            ;;
        esac
        ;;
      list-resource-record-sets)
        # Check if it's asking for ResourceRecords value with text output
        if [[ "$*" == *"--output text"* ]] && [[ "$*" == *".ResourceRecords[0].Value"* ]]; then
          # Return empty for text queries (no records found)
          echo ""
        else
          # Mock empty record sets for JSON queries
          echo '{"ResourceRecordSets": []}'
        fi
        ;;
      change-resource-record-sets)
        # Check if --query is asking for just the ID
        if [[ "$*" == *"--query ChangeInfo.Id"* ]] || [[ "$*" == *"--query 'ChangeInfo.Id'"* ]]; then
          echo "/change/C1234567890"
        else
          echo '{"ChangeInfo": {"Id": "/change/C1234567890", "Status": "PENDING", "SubmittedAt": "2023-01-01T00:00:00Z"}}'
        fi
        ;;
      *)
        echo "Unknown route53 command: $2" >&2
        exit 1
        ;;
    esac
    ;;
  configure)
    case "${2:-}" in
      get)
        case "${3:-}" in
          region)
            echo "us-east-1"
            ;;
          *)
            echo "Unknown configure get command: $3" >&2
            exit 1
            ;;
        esac
        ;;
      *)
        echo "Unknown configure command: $2" >&2
        exit 1
        ;;
    esac
    ;;
  *)
    echo "Unknown aws command: $1" >&2
    exit 1
    ;;
esac