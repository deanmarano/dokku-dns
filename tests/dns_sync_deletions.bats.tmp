#!/usr/bin/env bats
load test_helper

setup() {
  cleanup_dns_data
  setup_dns_provider aws
  mkdir -p "$PLUGIN_DATA_ROOT"
}

teardown() {
  cleanup_dns_data
  # Restore functions file if backup exists
  if [[ -f "${TEST_TMP_DIR}/functions.orig" ]]; then
    cp "${TEST_TMP_DIR}/functions.orig" "$PLUGIN_ROOT/functions"
  fi
}

@test "(dns:sync:deletions) error with invalid zone argument" {
  # Create a mock ZONES_ENABLED file
  echo "example.com" > "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  run dokku "$PLUGIN_COMMAND_PREFIX:sync:deletions" nonexistent-zone.com
  
  # Should still run successfully but find no orphaned records
  assert_success
}

@test "(dns:sync:deletions) shows message when no enabled zones" {
  # Ensure no enabled zones
  rm -f "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  
  run bash -c 'echo "n" | dokku '\"$PLUGIN_COMMAND_PREFIX\"':sync:deletions example.com'
  assert_success
  assert_output_contains "Scanning zone: example.com"
  assert_output_contains "- old-app.example.com (A record)"
  # Should not contain any test.org records (since we're only scanning example.com zone)
  [[ "$output" != *"test.org"* ]]
}

@test "(dns:sync:deletions) filters out current app domains from deletion list" {
  # Create test app with domains
  create_test_app current-app
  add_test_domains current-app current.example.com
  
  # Enable DNS for the app
  dokku "$PLUGIN_COMMAND_PREFIX:apps:enable" current-app >/dev/null 2>&1
  
  # Create enabled zones
  echo "example.com" > "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  
  run bash -c 'echo "n" | dokku '"$PLUGIN_COMMAND_PREFIX"':sync:deletions'
  assert_success
  
  # Should show record to be deleted but not current app domain
  assert_output_contains "- record-to-delete.example.com (A record)"
  [[ "$output" != *"- current.example.com (A record)"* ]]
  assert_output_contains "Plan: 0 to add, 0 to change, 1 to destroy"
  
  cleanup_test_app current-app
}

@test "(dns:sync:deletions) handles user cancellation gracefully" {
  # Create enabled zones with records to be deleted
  echo "example.com" > "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  
  # Mock user input to simulate 'n' (no) response
  run bash -c 'echo "n" | dokku '"$PLUGIN_COMMAND_PREFIX"':sync:deletions'
  assert_success
  assert_output_contains "Deletion cancelled by user"
}

@test "(dns:sync:deletions) attempts deletion when user confirms" {
  # Create enabled zones with records to be deleted
  echo "example.com" > "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  # Track AWS CLI calls
  
  # Mock user input to simulate 'y' (yes) response
  run bash -c 'echo "y" | dokku '"$PLUGIN_COMMAND_PREFIX"':sync:deletions'
  assert_success
  assert_output_contains "Deleting DNS records..."
  assert_output_contains "Deleting: record-to-delete.example.com"
  assert_output_contains "✅ Deleted: record-to-delete.example.com (A record)"
  assert_output_contains "Successfully deleted 1 of 1 DNS records"
}

@test "(dns:sync:deletions) handles AWS API failures gracefully" {
  # Create enabled zones
  echo "example.com" > "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  
  # Mock user input to simulate 'y' (yes) response
  run bash -c 'echo "y" | dokku '"$PLUGIN_COMMAND_PREFIX"':sync:deletions'
  assert_success
  assert_output_contains "❌ Failed to delete: record-to-delete.example.com"
  assert_output_contains "Successfully deleted 0 of 1 DNS records"
}

@test "(dns:sync:deletions) handles missing AWS credentials" {
  # Create enabled zones
  echo "example.com" > "$PLUGIN_DATA_ROOT/ZONES_ENABLED"
  
  # Set environment variable to simulate credential failure
  export AWS_MOCK_FAIL_CREDENTIALS=true
  
  run dokku "$PLUGIN_COMMAND_PREFIX:sync:deletions"
  assert_success
  # Should handle gracefully and show warning about hosted zone
  assert_output_contains "Could not find AWS hosted zone for: example.com"
}