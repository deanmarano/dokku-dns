#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# DNS Plugin - Post-Create Trigger
# Automatically sets up DNS management when an app is created

# Source plugin configuration
PLUGIN_BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$PLUGIN_BASE_PATH/config"

# Load functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define missing functions if needed
if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

# Load plugin functions
TRIGGER_BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$TRIGGER_BASE_PATH/functions"

# Main trigger logic
main() {
  local APP="$1"

  # Check if triggers are enabled
  local TRIGGERS_ENABLED_FILE="$PLUGIN_DATA_ROOT/TRIGGERS_ENABLED"
  if [[ ! -f "$TRIGGERS_ENABLED_FILE" ]]; then
    # Triggers are disabled - exit silently
    return 0
  fi

  # Skip if no app provided
  [[ -z "$APP" ]] && return 0

  dokku_log_info1 "DNS: Checking if app '$APP' should be added to DNS management..."

  # Predict the default domain from global vhost
  local PREDICTED_DOMAIN=""
  if command -v dokku >/dev/null 2>&1; then
    local GLOBAL_VHOST
    GLOBAL_VHOST=$(dokku domains:report --global --domains-global-vhosts 2>/dev/null | awk '{print $1}' || echo "")

    if [[ -n "$GLOBAL_VHOST" ]]; then
      PREDICTED_DOMAIN="${APP}.${GLOBAL_VHOST}"
      dokku_log_info1 "DNS: Predicted default domain: $PREDICTED_DOMAIN"
    fi
  fi

  # If no predicted domain, inform user and exit
  if [[ -z "$PREDICTED_DOMAIN" ]]; then
    dokku_log_info1 "DNS: No global vhost configured. DNS will be available when domains are added."
    return 0
  fi

  # Check if app is already managed by DNS
  if is_app_dns_managed "$APP"; then
    dokku_log_info1 "DNS: App '$APP' is already managed by DNS"
    return 0
  fi

  # Check if predicted domain is in an enabled zone
  if ! is_domain_in_enabled_zone "$PREDICTED_DOMAIN"; then
    dokku_log_info1 "DNS: Predicted domain '$PREDICTED_DOMAIN' is not in an enabled zone. Skipping automatic DNS setup."
    dokku_log_info1 "DNS: Use 'dokku dns:zones:enable <zone>' to enable zones or manually add with 'dokku dns:apps:enable $APP'"
    return 0
  fi

  # Auto-add app to DNS management
  dokku_log_info1 "DNS: Predicted domain is in an enabled zone. Adding '$APP' to DNS management"

  # First, enable the app for DNS management (creates service directory)
  if command -v dokku >/dev/null 2>&1; then
    # Pass the predicted domain explicitly since Dokku hasn't assigned domains yet
    # Don't suppress output or check exit code - dns:apps:enable may return non-zero
    # even when it successfully adds the app (e.g., if zone lookup has issues)
    dokku "$PLUGIN_COMMAND_PREFIX:apps:enable" "$APP" "$PREDICTED_DOMAIN" >/dev/null 2>&1 || true

    # Verify the app was actually added by checking if service directory exists
    if [[ -d "$PLUGIN_DATA_ROOT/$APP" ]]; then
      dokku_log_info1 "DNS: App '$APP' enabled for DNS management"

      # Now sync to create DNS records
      dokku_log_info1 "DNS: Syncing DNS records for '$APP'..."
      if dokku "$PLUGIN_COMMAND_PREFIX:sync" "$APP" >/dev/null 2>&1; then
        dokku_log_info1 "DNS: Domain '$PREDICTED_DOMAIN' synced successfully"
      else
        dokku_log_warn "DNS: Failed to sync DNS records automatically"
        dokku_log_info1 "DNS: Manual sync with: dokku $PLUGIN_COMMAND_PREFIX:sync $APP"
      fi
    else
      dokku_log_warn "DNS: Failed to enable app '$APP' for DNS management"
    fi
  else
    dokku_log_warn "DNS: dokku command not available"
  fi
}

# Run if called directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
