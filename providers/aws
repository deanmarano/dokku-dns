#!/bin/bash
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/config"
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/functions"

dns_provider_aws_validate_credentials() {
    return 0
}

dns_provider_aws_setup_env() {
    return 0
}

dns_provider_aws_get_hosted_zone_id() {
    local DOMAIN="$1"
    
    # Validate AWS CLI and credentials
    if ! command -v aws >/dev/null 2>&1; then
        return 1
    fi
    
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        return 1
    fi
    
    # Try to find hosted zone for domain or its parent domains
    local current_domain="$DOMAIN"
    
    while [[ "$current_domain" == *.* ]]; do
        # Check if there's a hosted zone for the current domain
        local zone_id
        zone_id=$(aws route53 list-hosted-zones --query "HostedZones[?Name=='${current_domain}.'].Id" --output text 2>/dev/null)
        
        if [[ -n "$zone_id" && "$zone_id" != "None" ]]; then
            # Found a hosted zone, return the zone ID without the /hostedzone/ prefix
            echo "${zone_id#/hostedzone/}"
            return 0
        fi
        
        # Remove the leftmost subdomain and try again
        current_domain="${current_domain#*.}"
    done
    
    # No hosted zone found
    return 1
}

dns_provider_aws_get_record_ip() {
    local DOMAIN="$1"
    
    # Validate AWS CLI and credentials
    if ! command -v aws >/dev/null 2>&1; then
        return 1
    fi
    
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        return 1
    fi
    
    # Get hosted zone ID for this domain
    local zone_id
    zone_id=$(dns_provider_aws_get_hosted_zone_id "$DOMAIN")
    if [[ -z "$zone_id" ]]; then
        return 1
    fi
    
    # Query Route53 for A record
    local record_ip
    record_ip=$(aws route53 list-resource-record-sets \
        --hosted-zone-id "$zone_id" \
        --query "ResourceRecordSets[?Name=='${DOMAIN}.' && Type=='A'].ResourceRecords[0].Value" \
        --output text 2>/dev/null)
    
    if [[ -n "$record_ip" && "$record_ip" != "None" ]]; then
        echo "$record_ip"
        return 0
    fi
    
    return 1
}

dns_provider_aws_sync_app() {
    local APP="$1"
    local PLUGIN_DATA_ROOT="${DNS_ROOT:-${DOKKU_LIB_ROOT:-/var/lib/dokku}/services/dns}"
    local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$APP/DOMAINS"
    local APP_DOMAINS=""
    
    if [[ -f "$APP_DOMAINS_FILE" ]]; then
        APP_DOMAINS=$(tr '\n' ' ' < "$APP_DOMAINS_FILE" 2>/dev/null)
    fi
    
    if [[ -z "$APP_DOMAINS" ]]; then
        echo "No DNS-managed domains found for app: $APP"
        return 0
    fi
    
    # Get server IP
    local SERVER_IP
    SERVER_IP=$(get_server_ip)
    
    if [[ -z "$SERVER_IP" ]] || [[ "$SERVER_IP" == "Unknown" ]]; then
        echo "Error: Unable to determine server IP address"
        return 1
    fi
    
    echo "Syncing domains for app '$APP' to server IP: $SERVER_IP"
    
    # Sync each domain (no zone enablement checking for explicit sync operations)
    local domains_synced=0
    
    for DOMAIN in $APP_DOMAINS; do
        [[ -z "$DOMAIN" ]] && continue
        
        echo "Syncing domain: $DOMAIN"
        
        # Get hosted zone ID for this domain
        local zone_id
        zone_id=$(dns_provider_aws_get_hosted_zone_id "$DOMAIN")
        if [[ -z "$zone_id" ]]; then
            echo "Error: No hosted zone found for $DOMAIN"
            continue
        fi
        
        # Create or update A record in Route53
        local change_batch="{
            \"Changes\": [{
                \"Action\": \"UPSERT\",
                \"ResourceRecordSet\": {
                    \"Name\": \"$DOMAIN\",
                    \"Type\": \"A\",
                    \"TTL\": 300,
                    \"ResourceRecords\": [{\"Value\": \"$SERVER_IP\"}]
                }
            }]
        }"
        
        if aws route53 change-resource-record-sets --hosted-zone-id "$zone_id" --change-batch "$change_batch" >/dev/null 2>&1; then
            echo "DNS record created: $DOMAIN -> $SERVER_IP"
            domains_synced=$((domains_synced + 1))
        else
            echo "Error: Failed to create DNS record for $DOMAIN"
        fi
    done
    
    return 0
}

dns_provider_aws_discover_existing_domains() {
    # Discover existing DNS records that might be Dokku-managed domains
    
    # Check if AWS CLI is available and configured
    if ! command -v aws >/dev/null 2>&1; then
        dokku_log_info1 "  AWS CLI not available for DNS record discovery"
        return 1
    fi
    
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        dokku_log_info1 "  AWS credentials not configured for DNS record discovery"
        return 1
    fi
    
    # Get all hosted zones
    local zones
    zones=$(aws route53 list-hosted-zones --query 'HostedZones[].Id' --output text 2>/dev/null) || {
        dokku_log_info1 "  Failed to list hosted zones"
        return 1
    }
    
    if [[ -z "$zones" ]]; then
        dokku_log_info1 "  No hosted zones found"
        return 0
    fi
    
    local found_records=false
    
    # Check each zone for A records that might point to this server
    for zone_id in $zones; do
        zone_id=${zone_id#/hostedzone/}
        
        # Get A records from this zone
        local records
        # shellcheck disable=SC2016
        records=$(aws route53 list-resource-record-sets --hosted-zone-id "$zone_id" \
                 --query 'ResourceRecordSets[?Type==`A`].[Name,ResourceRecords[0].Value]' \
                 --output text 2>/dev/null) || continue
        
        if [[ -n "$records" ]]; then
            while IFS=$'\t' read -r domain ip; do
                [[ -z "$domain" || -z "$ip" ]] && continue
                
                # Remove trailing dot from domain
                domain=${domain%.}
                
                # Check if this might be a Dokku domain by seeing if it matches any known apps
                local potential_dokku_domain=false
                
                # Simple heuristics: check if domain contains common Dokku patterns
                if [[ "$domain" == *".herokuapp.com"* ]] || \
                   [[ "$domain" == *".dokku."* ]] || \
                   [[ "$domain" =~ ^[a-z0-9-]+\.[a-z0-9.-]+$ ]]; then
                    potential_dokku_domain=true
                fi
                
                if [[ "$potential_dokku_domain" == "true" ]]; then
                    if [[ "$found_records" == "false" ]]; then
                        dokku_log_info1 "  Potential Dokku domains found:"
                        found_records=true
                    fi
                    dokku_log_info1 "    • $domain → $ip"
                fi
            done <<< "$records"
        fi
    done
    
    if [[ "$found_records" == "false" ]]; then
        dokku_log_info1 "  No potential Dokku domains found in Route53"
    fi
    
    return 0
}
