#!/bin/bash
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/config"
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/functions"

dns_provider_aws_validate_credentials() {
    return 0
}

dns_provider_aws_setup_env() {
    return 0
}

dns_provider_aws_get_hosted_zone_id() {
    local DOMAIN="$1"
    
    # Validate AWS CLI and credentials
    if ! command -v aws >/dev/null 2>&1; then
        return 1
    fi
    
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        return 1
    fi
    
    # Try to find hosted zone for domain or its parent domains
    local current_domain="$DOMAIN"
    
    while [[ "$current_domain" == *.* ]]; do
        # Check if there's a hosted zone for the current domain
        local zone_id
        zone_id=$(aws route53 list-hosted-zones --query "HostedZones[?Name=='${current_domain}.'].Id" --output text 2>/dev/null)
        
        if [[ -n "$zone_id" && "$zone_id" != "None" ]]; then
            # Found a hosted zone, return the zone ID without the /hostedzone/ prefix
            echo "${zone_id#/hostedzone/}"
            return 0
        fi
        
        # Remove the leftmost subdomain and try again
        current_domain="${current_domain#*.}"
    done
    
    # No hosted zone found
    return 1
}

dns_provider_aws_get_record_ip() {
    local DOMAIN="$1"
    
    # Validate AWS CLI and credentials
    if ! command -v aws >/dev/null 2>&1; then
        return 1
    fi
    
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        return 1
    fi
    
    # Get hosted zone ID for this domain
    local zone_id
    zone_id=$(dns_provider_aws_get_hosted_zone_id "$DOMAIN")
    if [[ -z "$zone_id" ]]; then
        return 1
    fi
    
    # Query Route53 for A record
    local record_ip
    record_ip=$(aws route53 list-resource-record-sets \
        --hosted-zone-id "$zone_id" \
        --query "ResourceRecordSets[?Name=='${DOMAIN}.' && Type=='A'].ResourceRecords[0].Value" \
        --output text 2>/dev/null)
    
    if [[ -n "$record_ip" && "$record_ip" != "None" ]]; then
        echo "$record_ip"
        return 0
    fi
    
    return 1
}

dns_provider_aws_sync_app() {
    local APP="$1"
    local PLUGIN_DATA_ROOT="${DNS_ROOT:-${DOKKU_LIB_ROOT:-/var/lib/dokku}/services/dns}"
    local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$APP/DOMAINS"
    local APP_DOMAINS=""
    
    if [[ -f "$APP_DOMAINS_FILE" ]]; then
        APP_DOMAINS=$(tr '\n' ' ' < "$APP_DOMAINS_FILE" 2>/dev/null)
    fi
    
    if [[ -z "$APP_DOMAINS" ]]; then
        echo "No DNS-managed domains found for app: $APP"
        return 0
    fi
    
    # Get server IP
    local SERVER_IP
    SERVER_IP=$(get_server_ip)
    
    if [[ -z "$SERVER_IP" ]] || [[ "$SERVER_IP" == "Unknown" ]]; then
        echo "Error: Unable to determine server IP address"
        return 1
    fi
    
    echo "=====> DNS Sync for app: $APP"
    echo "-----> Target IP: $SERVER_IP"
    echo
    
    # First, show what will be changed (plan)
    local plan_output
    plan_output=$(dns_plan_changes "$APP" "aws" 2>/dev/null)
    
    local add_count=0
    local change_count=0
    local no_change_count=0
    local total_count=0
    
    # Parse plan to get counts and show what will happen
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        case "$line" in
            ADD_COUNT:*) add_count="${line#ADD_COUNT:}" ;;
            CHANGE_COUNT:*) change_count="${line#CHANGE_COUNT:}" ;;
            NO_CHANGE_COUNT:*) no_change_count="${line#NO_CHANGE_COUNT:}" ;;
            TOTAL_COUNT:*) total_count="${line#TOTAL_COUNT:}" ;;
            ADD:*)
                local domain="${line#ADD:}"
                domain="${domain%%:*}"
                echo "-----> Will create: $domain → $SERVER_IP (A record)"
                ;;
            CHANGE:*)
                local parts="${line#CHANGE:}"
                local domain="${parts%%:*}"
                parts="${parts#*:}"
                local new_ip="${parts%%:*}"
                local old_ip="${parts##*:}"
                echo "-----> Will update: $domain → $new_ip (A record) [was: $old_ip]"
                ;;
            NO_CHANGE:*)
                local domain="${line#NO_CHANGE:}"
                domain="${domain%%:*}"
                echo "-----> Already correct: $domain → $SERVER_IP (A record)"
                ;;
        esac
    done <<< "$plan_output"
    
    if [[ "$add_count" -eq 0 && "$change_count" -eq 0 ]]; then
        echo
        echo "=====> No changes needed - all DNS records are already correct"
        return 0
    fi
    
    echo
    echo "=====> Applying changes..."
    
    # Sync each domain (no zone enablement checking for explicit sync operations)
    local domains_synced=0
    local domains_failed=0
    
    for DOMAIN in $APP_DOMAINS; do
        [[ -z "$DOMAIN" ]] && continue
        
        # Get current record to determine if this is create or update
        local current_ip
        current_ip=$(dns_provider_aws_get_record_ip "$DOMAIN" 2>/dev/null || echo "")
        
        # Get hosted zone ID for this domain
        local zone_id
        zone_id=$(dns_provider_aws_get_hosted_zone_id "$DOMAIN")
        if [[ -z "$zone_id" ]]; then
            echo "❌ Error: No hosted zone found for $DOMAIN"
            domains_failed=$((domains_failed + 1))
            continue
        fi
        
        # Skip if already correct
        if [[ -n "$current_ip" && "$current_ip" == "$SERVER_IP" ]]; then
            continue
        fi
        
        # Create or update A record in Route53
        local change_batch="{
            \"Changes\": [{
                \"Action\": \"UPSERT\",
                \"ResourceRecordSet\": {
                    \"Name\": \"$DOMAIN\",
                    \"Type\": \"A\",
                    \"TTL\": 300,
                    \"ResourceRecords\": [{\"Value\": \"$SERVER_IP\"}]
                }
            }]
        }"
        
        if aws route53 change-resource-record-sets --hosted-zone-id "$zone_id" --change-batch "$change_batch" >/dev/null 2>&1; then
            if [[ -z "$current_ip" ]]; then
                echo "✅ Created: $DOMAIN → $SERVER_IP (A record)"
            else
                echo "✅ Updated: $DOMAIN → $SERVER_IP (A record) [was: $current_ip]"
            fi
            domains_synced=$((domains_synced + 1))
        else
            echo "❌ Failed: $DOMAIN"
            domains_failed=$((domains_failed + 1))
        fi
    done
    
    # Show summary
    echo
    if [[ "$domains_failed" -eq 0 ]]; then
        echo "=====> Sync complete! Resources: $domains_synced changed, 0 failed"
    else
        echo "=====> Sync complete! Resources: $domains_synced changed, $domains_failed failed"
    fi
    
    return 0
}
