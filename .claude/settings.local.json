{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(make:*)",
      "Bash(rm:*)",
      "Bash(git restore:*)",
      "Bash(grep:*)",
      "Bash(source:*)",
      "Bash(docker build:*)",
      "Bash(bash:*)",
      "Bash(chmod:*)",
      "Bash(docker-compose:*)",
      "Bash(docker exec:*)",
      "Bash(ls:*)",
      "WebFetch(domain:github.com)",
      "Bash(scripts/test-server.sh:*)",
      "Bash(gh run view:*)",
      "Bash(python3:*)",
      "Bash(scripts/test-docker.sh:*)",
      "Bash(git add:*)",
      "Bash(find:*)",
      "Bash(docker logs:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(docker run:*)",
      "Bash(timeout:*)",
      "Bash(tests/wait-and-test.sh:*)",
      "Bash(bats:*)",
      "Bash(../commands dns:help)",
      "Bash(../commands dns:help report)",
      "Bash(../commands dns:help nonexistent-command)",
      "Bash(RUN_DOCKER_TESTS=0 git commit --amend -m \"$(cat <<''EOF''\nFix Docker testing: add plugin installation and permissions handling\n\n- Add automatic DNS plugin installation in Docker test orchestrator\n- Fix permissions on DNS data directory after plugin installation\n- Update test assertion to match improved AWS CLI error message\n- Ensure plugin is ready before running integration tests\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(docker system prune:*)",
      "Bash(docker container prune:*)",
      "Bash(true)",
      "Bash(git commit:*)",
      "Bash(scripts/test-docker.sh:*)",
      "Bash(docker rmi:*)",
      "Bash(./subcommands/sync-all:*)",
      "Bash(./commands dns:help)",
      "Bash(./commands dns:sync-all)",
      "Bash(./commands dns:help sync-all)",
      "Bash(docker compose:*)",
      "Bash(git checkout:*)",
      "Bash(./subcommands/cron:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(dokku dns:add:*)",
      "Bash(dokku dns:report:*)",
      "Bash(setup_dns_provider aws)",
      "Bash(create_test_app:*)",
      "Bash(add_test_domains:*)",
      "Bash(/dev/null)",
      "Bash(./debug_aws_mock.sh:*)",
      "Bash(gh pr view:*)",
      "Bash(dokku dns:zones:*)",
      "Bash(dokku plugin:reload:*)",
      "WebFetch(domain:dokku.com)",
      "Bash(docker cp:*)",
      "Bash(printf:*)",
      "Bash(./subcommands/configure:*)",
      "Bash(cp:*)",
      "Bash(sed:*)",
      "Bash(mkdir:*)",
      "Bash(./subcommands/apps:enable my-app)",
      "Bash(./test_helper.bash)",
      "Bash(dns_cmd cron:*)",
      "Bash(docker rm:*)",
      "Bash(./scripts/test-docker.sh:*)",
      "Bash(bats tests/*.bats)",
      "Bash(bash -c \"source tests/test_helper.bash && dns_cmd cron --enable\")",
      "Bash(bash -c \"source tests/test_helper.bash && dns_cmd cron --enable && dns_cmd cron --enable\")",
      "Bash(bash -c \"source tests/test_helper.bash && dns_cmd cron --enable >/dev/null && dns_cmd cron\")",
      "Bash(SKIP_TESTS=1 git commit -m \"fix: handle read-only Docker volume in CI workflow\n\nCopy integration test script to writable location before execution to avoid\n''chmod: Read-only file system'' error in CI. The Docker volume is mounted \nread-only but we need to make the script executable.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(bash -c \"source tests/test_helper.bash && cleanup_dns_data && setup_dns_provider ''aws'' && rm -f ''$PLUGIN_DATA_ROOT/TRIGGERS_ENABLED'' && ./post-create test-app\")",
      "Bash(bash -c \"source tests/test_helper.bash && cleanup_dns_data && ./subcommands/triggers\")",
      "Bash(bash -c \"source tests/test_helper.bash && cleanup_dns_data && mkdir -p \"\"$PLUGIN_DATA_ROOT\"\" && touch \"\"$PLUGIN_DATA_ROOT/TRIGGERS_ENABLED\"\" && ./subcommands/triggers\")",
      "Bash(DNS_TEST_MODE=1 PLUGIN_DATA_ROOT=\"/tmp/dns-test\" ./commands dns help sync:deletions)",
      "Bash(DNS_TEST_MODE=1 PLUGIN_DATA_ROOT=\"/tmp/dns-test\" ./commands dns:sync:deletions)",
      "Read(//**)",
      "Bash(cleanup_dns_data)",
      "Bash(./subcommands/sync:deletions)",
      "Bash(dokku dns:sync:deletions:*)",
      "Bash(gh run list:*)",
      "Bash(./debug_test.sh:*)",
      "Bash(./debug_deletion.sh)",
      "Bash(./debug_api_failures.sh:*)",
      "Bash(dokku help:*)",
      "Bash(dokku dns:*)",
      "Bash(scripts/view-test-log.sh:*)",
      "Bash(./debug_integration.sh:*)",
      "Bash(./debug_verify.sh:*)",
      "Bash(aws route53 list-hosted-zones:*)",
      "Bash(./debug_zone_count.sh:*)",
      "Bash(./debug_aws_args.sh:*)",
      "Bash(./debug_add_test.sh:*)",
      "Bash(./debug_api_failure_test.sh:*)",
      "Bash(./debug_test_name.sh:*)",
      "Bash(./debug_credentials_test.sh)",
      "Bash(./debug_test_order.sh:*)",
      "Bash(./debug_failing_test.sh)",
      "Bash(./debug_aws_mock_records.sh:*)",
      "Bash(./debug_sync_deletion_test.sh:*)",
      "Bash(./debug_zone_lookup.sh:*)",
      "Bash(AWS_MOCK_CONTROL_FILE=\"$PLUGIN_DATA_ROOT/aws_mock_control\" ./tests/bin/aws route53 list-hosted-zones --query \"HostedZones[?Name==''example.com.''].Id\" --output text)",
      "Bash(./debug_provider_function.sh:*)",
      "Bash(./debug_invalid_zone_test.sh:*)",
      "Bash(git push:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr diff:*)",
      "Bash(MOCK_API_KEY=\"test-key\" bash -c \"source providers/loader.sh && load_provider ''mock'' && echo ''Current provider:'' && get_current_provider && echo ''Available providers:'' && list_available_providers\")",
      "Bash(MOCK_API_KEY=\"test-key\" bash -c \"source providers/adapter.sh && init_provider_system ''mock'' && echo ''Testing adapter functions:'' && dns_get_domain_status ''www.example.com'' ''192.168.1.100''\")",
      "Bash(gh run watch:*)",
      "Bash(git branch:*)",
      "Bash(git pull:*)",
      "Bash(PATH=\"$HOME/bin:$PATH\" make format)",
      "Bash(gh pr edit:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh api:*)",
      "Bash(./commands dns help)",
      "Bash(env PLUGIN_DATA_ROOT=\"/tmp/dns-test\" ./commands dns providers:verify)",
      "Bash(env:*)",
      "Bash(SKIP_TESTS=1 git commit -m \"docs: reorder phases around 1.0 release\n\nReorganize phases to make logical sense:\n- Phases 26-27: Code quality fixes (critical and high priority) BEFORE release\n- Phase 28: Pre-release testing and validation\n- Phase 29: 1.0 Release\n- Phase 30: Community & Support (post-release activities)\n- Phases 31-32: Medium and low priority cleanup (post-1.0)\n\nThis ensures critical fixes happen before release, not after.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(SKIP_TESTS=1 git commit -m \"docs: add installation issues to Phase 26\n\nAdd todos for fixing installation detection:\n- Remove deprecated ''default DNS provider'' concept\n- Add DigitalOcean detection to install script\n- Report multi-provider mode properly during installation\n- Remove PROVIDER file creation (no longer needed)\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(gh pr list:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}