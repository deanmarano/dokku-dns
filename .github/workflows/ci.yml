---
name: CI

# yamllint disable-line rule:truthy
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - main

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-24.04
    env:
      DOKKU_VERSION: master

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/shellcheck
            /tmp/dokku-mock
          key: ${{ runner.os }}-test-deps-v3

      - name: Install dependencies (optimized)
        run: |
          # Install system dependencies including BATS and AWS CLI
          sudo apt-get update -qq &&
          sudo apt-get install -qq -y shellcheck nginx curl wget bats awscli &
          sudo sysctl -w vm.max_map_count=262144 &
          wait
          
          # Clean up any conflicting manual BATS installations
          sudo rm -f /usr/local/bin/bats /usr/local/libexec/bats-core/bats
          sudo rm -rf /usr/local/libexec/bats-core/
          
          # Verify BATS and AWS CLI are available
          echo "Verifying BATS installation..."
          which bats || echo "BATS not in PATH"
          ls -la /usr/bin/bats || echo "System BATS not found"
          bats --version || echo "BATS version check failed"
          
          echo "Verifying AWS CLI installation..."
          which aws || echo "AWS CLI not in PATH"
          aws --version || echo "AWS CLI version check failed"

      - name: Setup minimal Dokku environment for testing
        run: |
          # Create a minimal mock Dokku environment instead of full installation
          echo "Setting up minimal Dokku environment for testing..."
          
          # Create Dokku directories
          sudo mkdir -p /var/lib/dokku/plugins/available/dns
          sudo mkdir -p /var/lib/dokku/services/dns
          sudo mkdir -p /var/lib/dokku/config/dns
          
          # Create minimal dokku command mock for unit tests
          sudo tee /usr/local/bin/dokku > /dev/null << 'EOF'
          #!/bin/bash
          # Minimal dokku mock for unit testing
          case "$1" in
            "help"|"--help"|"-h")
              echo "usage: dokku [--quiet|--trace|--rm-container|--rm|--force] COMMAND <app> [command-specific-options]"
              echo ""
              echo "Primary help options, type dokku COMMAND:help for more details:"
              echo "  dns                          Manage DNS for your apps with cloud providers"
              ;;
            "apps:create")
              echo "-----> Creating app $2..."
              mkdir -p "/var/lib/dokku/apps/$2"
              ;;
            "apps:destroy")
              echo "-----> Destroying app $2..."
              rm -rf "/var/lib/dokku/apps/$2" 2>/dev/null || true
              ;;
            "domains:add")
              echo "-----> Adding domain $3 to app $2"
              ;;
            "domains:remove")
              echo "-----> Removing domain $3 from app $2"
              ;;
            "plugin:enable")
              echo "-----> Plugin $2 enabled"
              ;;
            "plugin:install")
              echo "-----> Plugin install completed"
              ;;
            *)
              # For DNS plugin commands, just pass through to the actual plugin
              if [[ "$1" == dns:* ]]; then
                PLUGIN_PATH="/var/lib/dokku/plugins/available/dns"
                if [[ -f "$PLUGIN_PATH/commands" ]]; then
                  "$PLUGIN_PATH/commands" "$@"
                else
                  echo "DNS plugin not found"
                  exit 1
                fi
              else
                echo "Unknown command: $1"
                exit 1
              fi
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/dokku
          
          # Copy plugin files to test location
          sudo cp -r . /var/lib/dokku/plugins/available/dns/
          sudo chown -R $(whoami):$(whoami) /var/lib/dokku/plugins/available/dns/
          
          # Fix permissions for plugin data directories
          sudo chown -R $(whoami):$(whoami) /var/lib/dokku/services/dns /var/lib/dokku/config/dns
          sudo chmod -R 755 /var/lib/dokku/services/dns /var/lib/dokku/config/dns
          
          echo "✅ Minimal Dokku environment ready for testing"

      - name: Generate README and run linting in parallel
        run: |
          # Run README generation check
          git fetch -q origin main
          changed=$(git --no-pager diff --name-only $GITHUB_SHA..origin/main)
          if [ "$changed" = "Dockerfile" ]; then
            echo "Please run 'make generate' to update the image version in the README.md"
          else
            make generate &
            README_PID=$!
            
            # Run linting in parallel
            make lint &
            LINT_PID=$!
            
            # Wait for both to complete
            wait $README_PID
            wait $LINT_PID
            
            # Check README changes
            if ! git diff --quiet README.md; then
              echo "Please run 'make generate'"
              git status --short
              git --no-pager diff README.md
              exit 1
            fi
          fi

      - name: Run unit tests
        run: make unit-tests

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: unit-test-results
          path: test-results

  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Build Docker images with registry caching
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./tests/docker/Dockerfile
        push: false
        load: true
        tags: |
          tests-docker-test-runner:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Start test containers
      run: |
        echo "🚀 Starting test containers and waiting for readiness..."
        chmod +x ./scripts/test-docker.sh
        # Start containers in detached mode and wait for readiness
        docker-compose -f tests/docker/docker-compose.yml up -d
        
        # Wait for Dokku container to be accessible
        echo "⏳ Waiting for Dokku container to be ready..."
        timeout 300 bash -c '
          while true; do
            # Check if Dokku container is responding
            if docker exec dokku-local dokku help >/dev/null 2>&1; then
              echo "✅ Dokku container is ready!"
              break
            fi
            echo "🔄 Still waiting for Dokku to be ready..."
            sleep 5
          done
        '
        
        # Give test-runner a moment to initialize
        echo "⏳ Initializing test environment..."
        sleep 10
        
    - name: Run integration tests
      run: |
        echo "🧪 Running integration tests..."
        # Execute the tests in the Dokku container where dokku command is available
        docker exec -i dokku-local bash -c "
          # Copy plugin to Dokku container and run tests there
          cp -r /tmp/dokku-dns /var/lib/dokku/plugins/available/dns &&
          dokku plugin:enable dns &&
          cd /var/lib/dokku/plugins/available/dns &&
          ./install &&
          # Ensure plugin data directory exists and is writable
          mkdir -p /var/lib/dokku/services/dns &&
          chown -R dokku:dokku /var/lib/dokku/services/dns 2>/dev/null || true &&
          # Copy test script to writable location and run it
          cp scripts/test-integration.sh /tmp/test-integration.sh &&
          chmod +x /tmp/test-integration.sh &&
          cd /var/lib/dokku/plugins/available/dns &&
          /tmp/test-integration.sh
        "
      
    - name: Stop test containers
      if: always()
      run: |
        echo "🧹 Cleaning up test containers..."
        docker-compose -f tests/docker/docker-compose.yml down -v || true
        
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-logs
        path: |
          *.log
          docker-compose.*.yml
        retention-days: 7
