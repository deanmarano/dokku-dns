---
name: CI

# yamllint disable-line rule:truthy
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - main

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-24.04
    env:
      DOKKU_VERSION: master

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          # Install system dependencies for testing
          sudo apt-get update -qq
          sudo apt-get install -qq -y shellcheck bats

      - name: Generate README and run linting in parallel
        run: |
          # Run README generation check
          git fetch -q origin main
          changed=$(git --no-pager diff --name-only $GITHUB_SHA..origin/main)
          if [ "$changed" = "Dockerfile" ]; then
            echo "Please run 'make generate' to update the image version in the README.md"
          else
            make generate &
            README_PID=$!
            
            # Run linting in parallel
            make lint &
            LINT_PID=$!
            
            # Wait for both to complete
            wait $README_PID
            wait $LINT_PID
            
            # Check README changes
            if ! git diff --quiet README.md; then
              echo "Please run 'make generate'"
              git status --short
              git --no-pager diff README.md
              exit 1
            fi
          fi

      - name: Run unit tests
        run: make unit-tests

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: unit-test-results
          path: |
            *.log
            tmp/test-results/
          if-no-files-found: ignore

  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Build Docker images with registry caching
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./tests/docker/Dockerfile
        push: false
        load: true
        tags: |
          tests-docker-test-runner:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Start test containers
      run: |
        echo "🚀 Starting test containers and waiting for readiness..."
        chmod +x ./scripts/test-docker.sh
        # Start containers in detached mode and wait for readiness
        docker-compose -f tests/docker/docker-compose.yml up -d
        
        # Wait for Dokku container to be accessible
        echo "⏳ Waiting for Dokku container to be ready..."
        timeout 300 bash -c '
          while true; do
            # Check if Dokku container is responding
            if docker exec dokku-local dokku help >/dev/null 2>&1; then
              echo "✅ Dokku container is ready!"
              break
            fi
            echo "🔄 Still waiting for Dokku to be ready..."
            sleep 5
          done
        '
        
        # Give test-runner a moment to initialize
        echo "⏳ Initializing test environment..."
        sleep 10
        
    - name: Run integration tests
      run: |
        echo "🧪 Running integration tests..."
        # Execute the tests in the Dokku container where dokku command is available
        docker exec -i dokku-local bash -c "
          # Set working directory to avoid shell-init errors
          cd /tmp &&
          
          # Install BATS for integration testing
          if ! command -v bats >/dev/null 2>&1; then
            echo 'Installing BATS...'
            apt-get update -qq >/dev/null 2>&1 &&
            git clone --quiet https://github.com/bats-core/bats-core.git /tmp/bats &&
            cd /tmp/bats &&
            ./install.sh /usr/local >/dev/null 2>&1 &&
            rm -rf /tmp/bats
          fi &&
          
          # Copy plugin to Dokku container and run tests there
          cp -r /tmp/dokku-dns /var/lib/dokku/plugins/available/dns &&
          dokku plugin:enable dns >/dev/null 2>&1 &&
          cd /var/lib/dokku/plugins/available/dns &&
          ./install >/dev/null 2>&1 &&
          # Ensure plugin data directory exists and is writable
          mkdir -p /var/lib/dokku/services/dns &&
          chown -R dokku:dokku /var/lib/dokku/services/dns 2>/dev/null || true &&
          
          # Run main integration tests
          echo '🧪 Running main integration tests...' &&
          cd /tmp/dokku-dns &&
          cp scripts/test-integration.sh /tmp/test-integration.sh &&
          chmod +x /tmp/test-integration.sh &&
          /tmp/test-integration.sh &&
          
          # Run BATS integration tests
          echo '🧪 Running BATS integration tests...' &&
          cd /tmp/dokku-dns &&
          if ls tests/integration/*.bats 1> /dev/null 2>&1; then
            cd tests/integration &&
            BATS_OUTPUT=\$(bats *.bats 2>&1) &&
            echo \"\$BATS_OUTPUT\" &&
            TOTAL_TESTS=\$(echo \"\$BATS_OUTPUT\" | head -1 | cut -d'.' -f2) &&
            PASSED_TESTS=\$(echo \"\$BATS_OUTPUT\" | grep -c '^ok ' || echo 0) &&
            FAILED_TESTS=\$(echo \"\$BATS_OUTPUT\" | grep -c '^not ok ' || echo 0) &&
            echo \"📊 BATS Integration Test Summary:\" &&
            echo \"   Total: \$TOTAL_TESTS tests\" &&
            echo \"   Passed: \$PASSED_TESTS tests\" &&
            echo \"   Failed: \$FAILED_TESTS tests\"
          else
            echo 'No BATS integration tests found, skipping...'
          fi
        "
      
    - name: Stop test containers
      if: always()
      run: |
        echo "🧹 Cleaning up test containers..."
        docker-compose -f tests/docker/docker-compose.yml down -v || true
        
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-logs
        path: |
          *.log
          docker-compose.*.yml
        retention-days: 7
