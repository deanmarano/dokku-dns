#!/usr/bin/env bash
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# Load dokku functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define missing functions if needed
if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

if ! declare -f dokku_log_fail >/dev/null 2>&1; then
  dokku_log_fail() { echo " !     $*" >&2; exit 1; }
fi

source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/functions"

service-zones-disable-cmd() {
  #E disable DNS zone and remove managed domains
  #E dokku $PLUGIN_COMMAND_PREFIX:zones:disable example.com
  #E dokku $PLUGIN_COMMAND_PREFIX:zones:disable --all
  #E disables automatic discovery for the specified zone
  #E existing managed domains in the zone are removed from DNS management
  #E DNS records remain in the provider but are no longer managed by Dokku
  #A zone, zone name to disable (optional with --all)
  #F --all, disable all zones
  declare desc="disable DNS zone and remove managed domains"
  local cmd="$PLUGIN_COMMAND_PREFIX:zones:disable" argv=("$@")
  
  # Handle Dokku command routing - first argument will be the command name
  if [[ "$1" == "$cmd" ]]; then
    shift 1
  fi
  
  declare ZONE=""
  local all_zones=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --all)
        all_zones=true
        shift
        ;;
      *)
        if [[ -z "$ZONE" ]]; then
          ZONE="$1"
        else
          dokku_log_fail "Unknown option: $1. Use <zone> or --all."
        fi
        shift
        ;;
    esac
  done
  
  # Validate arguments
  if [[ -z "$ZONE" && "$all_zones" == "false" ]]; then
    dokku_log_fail "Please specify a zone name or use --all flag"
  fi
  
  if [[ -n "$ZONE" && "$all_zones" == "true" ]]; then
    dokku_log_fail "Cannot specify both zone name and --all flag together"
  fi
  
  # Execute actions
  if [[ "$all_zones" == "true" ]]; then
    zones_remove_all
  else
    zones_remove_zone "$ZONE"
  fi
}

zones_remove_zone() {
  local ZONE="$1"
  
  dokku_log_info2 "Removing zone from auto-discovery: $ZONE"
  
  # Mark zone as disabled for auto-discovery
  zones_set_disabled "$ZONE"
  
  # Get all managed apps and their domains
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  if [[ ! -f "$LINKS_FILE" ]] || [[ ! -s "$LINKS_FILE" ]]; then
    dokku_log_info1 "No apps are currently managed by DNS"
    dokku_log_info2 "Zone '$ZONE' removed from auto-discovery"
    return 0
  fi
  
  local domains_removed=0
  local apps_to_remove=()
  local app_summaries=()
  
  # First pass: read all apps and collect domains to remove
  while IFS= read -r app; do
    [[ -z "$app" ]] && continue
    
    local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$app/DOMAINS"
    if [[ ! -f "$APP_DOMAINS_FILE" ]]; then
      continue
    fi
    
    # Check each domain to see if it belongs to this zone
    local remaining_domains=""
    local app_domains_removed=()
    while IFS= read -r domain; do
      [[ -z "$domain" ]] && continue
      
      # Check if domain belongs to this zone
      if [[ "$domain" == "$ZONE" ]] || [[ "$domain" == *".$ZONE" ]]; then
        app_domains_removed+=("$domain")
        domains_removed=$((domains_removed + 1))
      else
        remaining_domains="$remaining_domains$domain
"
      fi
    done < "$APP_DOMAINS_FILE"
    
    # Update the domains file and create summary
    if [[ ${#app_domains_removed[@]} -gt 0 ]]; then
      local domain_text="domain"
      [[ ${#app_domains_removed[@]} -gt 1 ]] && domain_text="domains"
      
      if [[ -n "$remaining_domains" ]]; then
        echo -n "$remaining_domains" | grep -v "^$" > "$APP_DOMAINS_FILE"
        app_summaries+=("$app: ${app_domains_removed[*]}")
      else
        rm -f "$APP_DOMAINS_FILE"
        apps_to_remove+=("$app")
        app_summaries+=("$app: ${app_domains_removed[*]}")
      fi
    fi
    
  done < "$LINKS_FILE"
  
  # Show organized summary
  if [[ ${#app_summaries[@]} -gt 0 ]]; then
    echo
    for summary in "${app_summaries[@]}"; do
      local app_name="${summary%%:*}"
      local app_details="${summary#*: }"
      dokku_log_info1 "â€¢ $app_name: $app_details"
    done
  fi
  
  # Second pass: remove apps from LINKS file if needed
  if [[ ${#apps_to_remove[@]} -gt 0 ]]; then
    local TEMP_LINKS
    TEMP_LINKS=$(mktemp)
    if [[ -f "$LINKS_FILE" ]]; then
      while IFS= read -r app; do
        local should_keep=true
        for remove_app in "${apps_to_remove[@]}"; do
          if [[ "$app" == "$remove_app" ]]; then
            should_keep=false
            break
          fi
        done
        if [[ "$should_keep" == "true" ]]; then
          echo "$app" >> "$TEMP_LINKS"
        fi
      done < "$LINKS_FILE"
    fi
    mv "$TEMP_LINKS" "$LINKS_FILE"
  fi
  
  echo
  dokku_log_info2 "Zone '$ZONE' removed from auto-discovery"
  
  # Create better summary message
  if [[ $domains_removed -gt 0 ]]; then
    local summary_msg="Removed $domains_removed"
    [[ $domains_removed -eq 1 ]] && summary_msg="$summary_msg domain" || summary_msg="$summary_msg domains"
    summary_msg="$summary_msg from ${#app_summaries[@]}"
    [[ ${#app_summaries[@]} -eq 1 ]] && summary_msg="$summary_msg app" || summary_msg="$summary_msg apps"
    
    if [[ ${#apps_to_remove[@]} -eq ${#app_summaries[@]} ]]; then
      summary_msg="$summary_msg (all apps removed from DNS management)"
    elif [[ ${#apps_to_remove[@]} -gt 0 ]]; then
      summary_msg="$summary_msg (${#apps_to_remove[@]} apps removed from DNS management)"
    fi

    dokku_log_info1 "$summary_msg"
  fi
}

zones_remove_all() {
  dokku_log_info2 "Removing all zones from auto-discovery"
  
  # Get all managed apps and their domains
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  if [[ ! -f "$LINKS_FILE" ]] || [[ ! -s "$LINKS_FILE" ]]; then
    dokku_log_info1 "No apps are currently managed by DNS"
    
    # Still clear enabled zones file if it exists
    local ENABLED_ZONES_FILE="$PLUGIN_DATA_ROOT/ENABLED_ZONES"
    if [[ -f "$ENABLED_ZONES_FILE" ]]; then
      rm -f "$ENABLED_ZONES_FILE"
    fi
    
    dokku_log_info2 "All zones removed from auto-discovery"
    return 0
  fi
  
  local total_domains_removed=0
  local apps_removed=0
  local apps_processed=0
  
  # Create a temporary file to track which apps to keep
  local TEMP_LINKS_FILE
  TEMP_LINKS_FILE=$(mktemp)
  
  # Process each app
  while IFS= read -r app; do
    [[ -z "$app" ]] && continue
    apps_processed=$((apps_processed + 1))
    
    local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$app/DOMAINS"
    if [[ ! -f "$APP_DOMAINS_FILE" ]]; then
      continue
    fi
    
    # Count domains for this app
    local app_domain_count
    app_domain_count=$(grep -c "." "$APP_DOMAINS_FILE" 2>/dev/null || echo "0")
    
    if [[ $app_domain_count -gt 0 ]]; then
      dokku_log_info1 "Removing app '$app' from DNS management ($app_domain_count domains)"
      total_domains_removed=$((total_domains_removed + app_domain_count))
      apps_removed=$((apps_removed + 1))
      
      # Remove the app's domains file and directory
      rm -f "$APP_DOMAINS_FILE"
      rmdir "$(dirname "$APP_DOMAINS_FILE")" 2>/dev/null || true
    fi
    
  done < "$LINKS_FILE"
  
  # Clear the LINKS file since we're removing all apps
  true > "$LINKS_FILE"
  
  # Clear enabled zones file
  local ENABLED_ZONES_FILE="$PLUGIN_DATA_ROOT/ENABLED_ZONES"
  if [[ -f "$ENABLED_ZONES_FILE" ]]; then
    rm -f "$ENABLED_ZONES_FILE"
  fi
  
  # Clean up temp file
  rm -f "$TEMP_LINKS_FILE"
  
  dokku_log_info2 "All zones removed from auto-discovery"
  dokku_log_info1 "Apps processed: $apps_processed"
  dokku_log_info1 "Apps removed from DNS: $apps_removed"
  dokku_log_info1 "Total domains removed: $total_domains_removed"
  
}

service-zones-disable-cmd "$@"