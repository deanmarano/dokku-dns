#!/usr/bin/env bash
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# Load dokku functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define missing functions if needed
if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

if ! declare -f dokku_log_fail >/dev/null 2>&1; then
  dokku_log_fail() { echo " !     $*" >&2; exit 1; }
fi

source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/functions"

service-zones-cmd() {
  #E list DNS zones and their auto-discovery status
  #E dokku $PLUGIN_COMMAND_PREFIX:zones [<zone>]
  #E without arguments: displays all available DNS zones and their auto-discovery status
  #E <zone>: show detailed information about a specific zone
  #E use 'dokku $PLUGIN_COMMAND_PREFIX:zones:enable' to enable auto-discovery for zones
  #E use 'dokku $PLUGIN_COMMAND_PREFIX:zones:disable' to disable auto-discovery for zones
  #A zone, zone name to show detailed information for (optional)
  declare desc="list DNS zones and their auto-discovery status"
  local cmd="$PLUGIN_COMMAND_PREFIX:zones" argv=("$@")
  
  # Handle Dokku command routing - first argument will be the command name
  if [[ "$1" == "$cmd" ]]; then
    shift 1
  fi
  
  declare ZONE=""
  
  # Check for any flags (which are no longer supported)
  while [[ $# -gt 0 ]]; do
    case $1 in
      --*)
        dokku_log_fail "Flags are no longer supported. Use 'dokku $PLUGIN_COMMAND_PREFIX:zones:enable' or 'dokku $PLUGIN_COMMAND_PREFIX:zones:disable' instead."
        ;;
      *)
        if [[ -z "$ZONE" ]]; then
          ZONE="$1"
        else
          dokku_log_fail "Unknown option: $1. Use <zone> or no arguments for status listing."
        fi
        shift
        ;;
    esac
  done
  
  # Execute actions
  if [[ -n "$ZONE" ]]; then
    zones_show_zone "$ZONE"
  else
    zones_list_status
  fi
}

zones_list_status() {
  # AWS is always the provider now
  local PROVIDER="aws"
  
  echo
  dokku_log_info2 "DNS Zones Status (AWS provider)"
  
  zones_list_aws_zones
}

zones_list_aws_zones() {
  # Validate AWS dependencies
  if ! command -v aws >/dev/null 2>&1; then
    dokku_log_fail "AWS CLI is not installed. Please install aws-cli to use AWS Route53 provider."
  fi
  
  if ! aws sts get-caller-identity >/dev/null 2>&1; then
    dokku_log_fail "AWS CLI is not configured or credentials are invalid."
  fi
  
  # Check if any zones exist
  local zone_count
  zone_count=$(aws route53 list-hosted-zones --query 'length(HostedZones)' --output text 2>/dev/null)
  
  if [[ -z "$zone_count" ]] || [[ "$zone_count" == "0" ]]; then
    dokku_log_info1 "No hosted zones found in Route53"
    echo
    dokku_log_info2 "Management Commands"
    dokku_log_info1 "• Verify AWS setup: dokku $PLUGIN_COMMAND_PREFIX:providers:verify"
    return 0
  fi
  
  # Get managed apps for comparison
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  local MANAGED_APPS=""
  if [[ -f "$LINKS_FILE" ]]; then
    MANAGED_APPS=$(cat "$LINKS_FILE" 2>/dev/null || echo "")
  fi
  
  # Get all managed domains
  local ALL_MANAGED_DOMAINS=""
  if [[ -n "$MANAGED_APPS" ]]; then
    while IFS= read -r app; do
      [[ -z "$app" ]] && continue
      local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$app/DOMAINS"
      if [[ -f "$APP_DOMAINS_FILE" ]]; then
        local APP_DOMAINS
        APP_DOMAINS=$(cat "$APP_DOMAINS_FILE" 2>/dev/null || echo "")
        ALL_MANAGED_DOMAINS="$ALL_MANAGED_DOMAINS $APP_DOMAINS"
      fi
    done <<< "$MANAGED_APPS"
  fi
  
  # Get zone information using AWS CLI queries
  local zones_data
  zones_data=$(aws route53 list-hosted-zones --query 'HostedZones[].[Id,Name,ResourceRecordSetCount,Config.Comment]' --output text 2>/dev/null)
  
  # Parse and display zones
  local zone_num=0
  while IFS=$'\t' read -r zone_id zone_name record_count comment; do
    [[ -z "$zone_id" ]] && continue
    
    # Clean up the data
    zone_id=${zone_id#/hostedzone/}
    zone_name=${zone_name%.}
    [[ "$comment" == "None" ]] && comment=""
    
    zone_num=$((zone_num + 1))
    
    # Check if any managed domains belong to this zone
    local managed_in_zone=0
    local zone_domains=""
    
    if [[ -n "$ALL_MANAGED_DOMAINS" ]]; then
      for domain in $ALL_MANAGED_DOMAINS; do
        # Check if domain matches this zone exactly or is a subdomain
        if [[ "$domain" == "$zone_name" ]] || [[ "$domain" == *".$zone_name" ]]; then
          managed_in_zone=$((managed_in_zone + 1))
          if [[ -n "$zone_domains" ]]; then
            zone_domains="$zone_domains, $domain"
          else
            zone_domains="$domain"
          fi
        fi
      done
    fi
    
    # Check if zone is enabled
    local zone_enabled_status="❌ DISABLED"
    if is_zone_enabled "$zone_name"; then
      zone_enabled_status="✅ ENABLED"
    fi
    
    # Display zone info
    echo
    if [[ $managed_in_zone -gt 0 ]]; then
      dokku_log_info1 "$zone_enabled_status $zone_name ($zone_id) - ACTIVE"
      dokku_log_info1 "   Managed domains ($managed_in_zone): $zone_domains"
    else
      dokku_log_info1 "$zone_enabled_status $zone_name ($zone_id) - available"
    fi
    dokku_log_info1 "   Records: $record_count"
    if [[ -n "$comment" ]] && [[ "$comment" != "null" ]]; then
      dokku_log_info1 "   Comment: $comment"
    fi
  done <<< "$zones_data"
  
  # Show summary and management commands
  echo
  dokku_log_info2 "Management Commands"
  dokku_log_info1 "• Add zone to auto-discovery: dokku $PLUGIN_COMMAND_PREFIX:zones:enable <zone-name>"
  dokku_log_info1 "• Remove zone from auto-discovery: dokku $PLUGIN_COMMAND_PREFIX:zones:disable <zone-name>"
  dokku_log_info1 "• Add all zones to auto-discovery: dokku $PLUGIN_COMMAND_PREFIX:zones:enable --all"
  dokku_log_info1 "• Remove all zones from auto-discovery: dokku $PLUGIN_COMMAND_PREFIX:zones:disable --all"
  dokku_log_info1 "• Show zone details: dokku $PLUGIN_COMMAND_PREFIX:zones <zone-name>"
}

zones_list_cloudflare_zones() {
  dokku_log_warn "Cloudflare zones management not yet implemented"
  dokku_log_info1 "Use AWS Route53 provider for full zones support"
}

zones_show_zone() {
  local ZONE="$1"
  
  # AWS is always the provider now
  local PROVIDER="aws"
  
  # Validate AWS dependencies
  if ! command -v aws >/dev/null 2>&1; then
    dokku_log_fail "AWS CLI is not installed. Please install aws-cli to use AWS Route53 provider."
  fi
  
  
  if ! aws sts get-caller-identity >/dev/null 2>&1; then
    dokku_log_fail "AWS CLI is not configured or credentials are invalid."
  fi
  
  echo
  dokku_log_info2 "DNS Zone Details: $ZONE"
  
  # Get zone ID and basic info
  local ZONE_ID
  ZONE_ID=$(aws route53 list-hosted-zones --query "HostedZones[?Name=='${ZONE}.'].Id" --output text 2>/dev/null | sed 's|/hostedzone/||')
  
  if [[ -z "$ZONE_ID" ]] || [[ "$ZONE_ID" == "None" ]]; then
    dokku_log_fail "Zone '$ZONE' not found in Route53. Available zones:"
    aws route53 list-hosted-zones --query 'HostedZones[].Name' --output text 2>/dev/null | tr '\t ' '\n' | grep -v '^$' | sed 's/\.$//g' | while read -r zone; do
      echo "  • $zone"
    done
    return 1
  fi
  
  # Get Dokku app associations first
  echo
  dokku_log_info2 "Dokku Integration"
  
  # Get all managed apps and their domains
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  local zone_apps=()
  local zone_domains=()
  
  if [[ -f "$LINKS_FILE" ]]; then
    while IFS= read -r app; do
      [[ -z "$app" ]] && continue
      
      local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$app/DOMAINS"
      if [[ -f "$APP_DOMAINS_FILE" ]]; then
        while IFS= read -r domain; do
          [[ -z "$domain" ]] && continue
          
          # Check if domain belongs to this zone
          if [[ "$domain" == "$ZONE" ]] || [[ "$domain" == *".$ZONE" ]]; then
            zone_apps+=("$app")
            zone_domains+=("$domain")
          fi
        done < "$APP_DOMAINS_FILE"
      fi
    done < "$LINKS_FILE"
  fi
  
  if [[ ${#zone_domains[@]} -gt 0 ]]; then
    dokku_log_info1 "Managed Domains (${#zone_domains[@]}):"
    local i=0
    for domain in "${zone_domains[@]}"; do
      local app="${zone_apps[$i]}"
      echo "  ✓ $domain (app: $app)"
      i=$((i + 1))
    done
  else
    dokku_log_info1 "No domains in this zone are currently managed by Dokku DNS"
  fi
  
  # Show potential domains from Dokku apps
  echo
  dokku_log_info2 "Potential Dokku Domains"
  
  # Get all domains from all Dokku apps that could belong to this zone
  local potential_domains=()
  local APPS_LIST
  APPS_LIST=$(dokku apps:list 2>/dev/null | grep -v "====>" || echo "")
  
  if [[ -n "$APPS_LIST" ]]; then
    while IFS= read -r app; do
      [[ -z "$app" ]] && continue
      local APP_DOMAINS
      APP_DOMAINS=$(dokku domains:report "$app" --domains-app-vhosts 2>/dev/null || echo "")
      if [[ -n "$APP_DOMAINS" ]]; then
        for domain in $APP_DOMAINS; do
          # Check if domain belongs to this zone but is not managed
          if [[ "$domain" == "$ZONE" ]] || [[ "$domain" == *".$ZONE" ]]; then
            # Check if it's already managed
            local already_managed=false
            for managed_domain in "${zone_domains[@]}"; do
              if [[ "$domain" == "$managed_domain" ]]; then
                already_managed=true
                break
              fi
            done
            
            if [[ "$already_managed" == "false" ]]; then
              potential_domains+=("$domain:$app")
            fi
          fi
        done
      fi
    done <<< "$APPS_LIST"
  fi
  
  if [[ ${#potential_domains[@]} -gt 0 ]]; then
    dokku_log_info1 "Unmanaged domains that could be added:"
    for domain_app in "${potential_domains[@]}"; do
      local domain="${domain_app%:*}"
      local app="${domain_app#*:}"
      echo "  • $domain (app: $app)"
    done
    echo
    dokku_log_info1 "To manage these domains:"
    dokku_log_info1 "• Individual: dokku $PLUGIN_COMMAND_PREFIX:apps:enable <app>"
    dokku_log_info1 "• All in zone: dokku $PLUGIN_COMMAND_PREFIX:zones:enable $ZONE"
  else
    dokku_log_info1 "All potential domains for this zone are already managed"
  fi
  
  # Show AWS Route53 technical details
  echo
  dokku_log_info2 "AWS Route53 Information"
  
  # Get zone details using AWS CLI queries  
  local record_count comment private_zone
  record_count=$(aws route53 get-hosted-zone --id "$ZONE_ID" --query 'HostedZone.ResourceRecordSetCount' --output text 2>/dev/null)
  comment=$(aws route53 get-hosted-zone --id "$ZONE_ID" --query 'HostedZone.Config.Comment' --output text 2>/dev/null)
  private_zone=$(aws route53 get-hosted-zone --id "$ZONE_ID" --query 'HostedZone.Config.PrivateZone' --output text 2>/dev/null)
  
  # Handle None values
  [[ "$record_count" == "None" ]] && record_count="N/A"
  [[ "$comment" == "None" ]] && comment=""
  [[ "$private_zone" == "None" ]] && private_zone="false"
  
  dokku_log_info1 "Zone ID: $ZONE_ID"
  dokku_log_info1 "Zone Name: $ZONE"
  dokku_log_info1 "Record Count: $record_count"
  if [[ "$private_zone" == "true" ]]; then
    dokku_log_info1 "Type: Private Zone"
  else
    dokku_log_info1 "Type: Public Zone"
  fi
  if [[ -n "$comment" && "$comment" != "null" ]]; then
    dokku_log_info1 "Comment: $comment"
  fi
  
  # Get nameservers
  local nameservers
  nameservers=$(aws route53 get-hosted-zone --id "$ZONE_ID" --query 'DelegationSet.NameServers' --output text 2>/dev/null)
  if [[ -n "$nameservers" && "$nameservers" != "None" ]]; then
    dokku_log_info1 "Name Servers: $nameservers"
  fi
  
  # Show management commands
  echo
  dokku_log_info2 "Management Commands"
  dokku_log_info1 "• Add zone to auto-discovery: dokku $PLUGIN_COMMAND_PREFIX:zones:enable $ZONE"
  dokku_log_info1 "• Remove zone from auto-discovery: dokku $PLUGIN_COMMAND_PREFIX:zones:disable $ZONE"
  dokku_log_info1 "• Sync records: dokku $PLUGIN_COMMAND_PREFIX:sync-all"
  dokku_log_info1 "• List all zones: dokku $PLUGIN_COMMAND_PREFIX:zones"
}

service-zones-cmd "$@"