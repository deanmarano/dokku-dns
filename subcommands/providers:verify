#!/usr/bin/env bash
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# Load dokku functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define missing functions if needed
if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

if ! declare -f dokku_log_fail >/dev/null 2>&1; then
  dokku_log_fail() { echo " !     $*" >&2; exit 1; }
fi

source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/functions"

service-providers-verify-cmd() {
  #E verify DNS provider setup and connectivity, discover existing DNS records
  #E dokku $PLUGIN_COMMAND_PREFIX:providers:verify [provider]
  #E verify configured provider or specific provider if specified
  #E for AWS: checks if AWS CLI is configured, tests Route53 access, shows existing DNS records for Dokku domains
  #A provider, optional DNS provider to verify (defaults to configured provider)
  declare desc="verify DNS provider setup and connectivity"
  local cmd="$PLUGIN_COMMAND_PREFIX:providers:verify" argv=("$@")
  [[ ${argv[0]} == "$cmd" ]] && shift 1
  
  local PROVIDER_ARG="$1"
  local GLOBAL_CONFIG_ROOT="$PLUGIN_DATA_ROOT"
  
  # Always verify AWS (the only supported provider)
  local PROVIDER="aws"
  dokku_log_info2 "Verifying AWS Route53 provider"
  
  if [[ -n "$PROVIDER_ARG" ]] && [[ "$PROVIDER_ARG" != "aws" ]]; then
    dokku_log_fail "Provider '$PROVIDER_ARG' is not supported. Only AWS is supported."
  fi
  
  # Load the provider adapter system
  local ADAPTER_PATH
  ADAPTER_PATH="$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/providers/adapter.sh"
  if [[ ! -f "$ADAPTER_PATH" ]]; then
    dokku_log_fail "Provider adapter system not found"
  fi
  source "$ADAPTER_PATH"
  
  local CREDENTIALS_DIR="$GLOBAL_CONFIG_ROOT/credentials"
  mkdir -p "$CREDENTIALS_DIR"
  chmod 700 "$CREDENTIALS_DIR"
  
  case "$PROVIDER" in
    aws)
      dokku_log_info2 "Verifying AWS Route53 Setup"
      echo
      
      # Show current configuration status
      dokku_log_info1 "Current Configuration:"
      dokku_log_info1 "  DNS Provider: AWS (only supported provider)"
      
      # Check if AWS CLI is installed
      if ! command -v aws >/dev/null 2>&1; then
        dokku_log_info1 "  ✗ AWS CLI: not installed"
        echo
        dokku_log_fail "AWS CLI is not installed. Please install it first:
  
  # Ubuntu/Debian:
  sudo apt update && sudo apt install awscli
  
  # macOS:
  brew install awscli
  
  # Or install via pip:
  pip install awscli
  
  # Or download from AWS:
  curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"
  unzip awscliv2.zip
  sudo ./aws/install"
      else
        local AWS_VERSION
        AWS_VERSION=$(aws --version 2>/dev/null | cut -d' ' -f1 || echo "unknown")
        dokku_log_info1 "  AWS CLI: installed ($AWS_VERSION)"
      fi
      
      echo
      
      # Check AWS credentials and configuration
      dokku_log_info1 "Credential Detection:"
      
      # Helper function to run AWS commands with correct user context
      run_aws_command() {
        if aws "$@" >/dev/null 2>&1; then
          aws "$@" 2>/dev/null
        elif [[ -n "${SUDO_USER:-}" ]] && sudo -u "$SUDO_USER" aws "$@" >/dev/null 2>&1; then
          sudo -u "$SUDO_USER" aws "$@" 2>/dev/null
        elif [[ -f "/home/dokku/.aws/credentials" ]] && sudo -u dokku aws "$@" >/dev/null 2>&1; then
          sudo -u dokku aws "$@" 2>/dev/null
        else
          return 1
        fi
      }
      
      # Check different credential sources
      local CREDENTIALS_DETECTED=false
      local CREDENTIAL_SOURCE=""
      
      # Check environment variables
      if [[ -n "${AWS_ACCESS_KEY_ID:-}" ]] && [[ -n "${AWS_SECRET_ACCESS_KEY:-}" ]]; then
        dokku_log_info1 "  Environment variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY"
        CREDENTIALS_DETECTED=true
        CREDENTIAL_SOURCE="environment"
      else
        dokku_log_info1 "  ✗ Environment variables: not set"
      fi
      
      # Check AWS CLI configuration files
      local AWS_CONFIG_STATUS="✗"
      if [[ -f ~/.aws/credentials ]] || [[ -f ~/.aws/config ]]; then
        AWS_CONFIG_STATUS="YES"
        CREDENTIALS_DETECTED=true
        if [[ -z "$CREDENTIAL_SOURCE" ]]; then
          CREDENTIAL_SOURCE="aws-config"
        fi
      fi
      dokku_log_info1 "  $AWS_CONFIG_STATUS AWS config files: ~/.aws/credentials, ~/.aws/config"
      
      # Check IAM role (EC2 metadata)
      if curl -s --max-time 2 http://169.254.169.254/latest/meta-data/iam/security-credentials/ >/dev/null 2>&1; then
        dokku_log_info1 "  IAM Role: available (EC2 instance)"
        CREDENTIALS_DETECTED=true
        if [[ -z "$CREDENTIAL_SOURCE" ]]; then
          CREDENTIAL_SOURCE="iam-role"
        fi
      else
        dokku_log_info1 "  ✗ IAM Role: not available"
      fi
      
      echo
      
      # Try to authenticate and get AWS identity
      dokku_log_info1 "Testing AWS Authentication:"
      local AWS_CHECK_SUCCESS=false
      
      if run_aws_command sts get-caller-identity >/dev/null 2>&1; then
        AWS_CHECK_SUCCESS=true
        # Determine which context is working for user feedback
        if aws sts get-caller-identity >/dev/null 2>&1; then
          dokku_log_info1 "  Authentication successful (current context)"
        elif [[ -n "${SUDO_USER:-}" ]]; then
          dokku_log_info1 "  Authentication successful (user: $SUDO_USER)"
        else
          dokku_log_info1 "  Authentication successful (dokku user)"
        fi
      else
        dokku_log_info1 "  ✗ Authentication failed"
      fi
      
      if [[ "$AWS_CHECK_SUCCESS" != "true" ]]; then
        echo
        dokku_log_fail "AWS CLI is not configured or credentials are invalid.

Please configure AWS credentials using one of these methods:

Method 1 - Using dokku config:set (Recommended for Dokku):
  dokku config:set --global AWS_ACCESS_KEY_ID=your_access_key_id
  dokku config:set --global AWS_SECRET_ACCESS_KEY=your_secret_access_key  
  dokku config:set --global AWS_DEFAULT_REGION=us-east-1

Method 2 - Using aws configure:
  aws configure
  # Then enter your AWS Access Key ID, Secret Key, and default region

Method 3 - Using environment variables:
  export AWS_ACCESS_KEY_ID=your_key_id
  export AWS_SECRET_ACCESS_KEY=your_secret_key
  export AWS_DEFAULT_REGION=us-east-1

Method 4 - Using IAM roles (if running on EC2):
  # Attach an IAM role with Route53 permissions to your EC2 instance

Method 5 - Using AWS credential files:
  # Edit ~/.aws/credentials and ~/.aws/config

Required AWS Permissions:
  - route53:ListHostedZones
  - route53:ListResourceRecordSets
  - route53:ChangeResourceRecordSets

For more info: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html"
      fi
      
      echo
      
      # Get detailed AWS identity information
      dokku_log_info1 "AWS Account Details:"
      local AWS_IDENTITY AWS_USER_ID AWS_ACCOUNT AWS_REGION AWS_ARN
      
      AWS_IDENTITY=$(run_aws_command sts get-caller-identity)
      AWS_REGION=$(run_aws_command configure get region 2>/dev/null || echo "not-set")
      
      if [[ -n "$AWS_IDENTITY" ]]; then
        AWS_USER_ID=$(echo "$AWS_IDENTITY" | jq -r '.UserId' 2>/dev/null || echo "unknown")
        AWS_ACCOUNT=$(echo "$AWS_IDENTITY" | jq -r '.Account' 2>/dev/null || echo "unknown")
        AWS_ARN=$(echo "$AWS_IDENTITY" | jq -r '.Arn' 2>/dev/null || echo "unknown")
        
        dokku_log_info1 "  Account ID: $AWS_ACCOUNT"
        dokku_log_info1 "  User/Role ARN: $AWS_ARN"
        dokku_log_info1 "  User ID: $AWS_USER_ID"
        dokku_log_info1 "  Region: $AWS_REGION"
        
        if [[ "$AWS_REGION" == "not-set" ]]; then
          dokku_log_warn "  No default region set. Consider setting AWS_DEFAULT_REGION"
        fi
      else
        dokku_log_info1 "  ✗ Could not retrieve AWS identity"
      fi
      
      echo
      
      # Test Route53 permissions comprehensively
      dokku_log_info1 "Testing Route53 API Access:"
      local ROUTE53_SUCCESS=false
      
      # Test list-hosted-zones permission
      if run_aws_command route53 list-hosted-zones >/dev/null 2>&1; then
        dokku_log_info1 "  route53:ListHostedZones - can list hosted zones"
        ROUTE53_SUCCESS=true
        
        # Get zone count
        local ZONE_COUNT
        ZONE_COUNT=$(run_aws_command route53 list-hosted-zones --query 'length(HostedZones)' --output text 2>/dev/null || echo "0")
        dokku_log_info1 "  Found $ZONE_COUNT hosted zone(s)"
        
        # Test record listing if zones exist
        if [[ "$ZONE_COUNT" -gt 0 ]]; then
          local FIRST_ZONE_ID
          FIRST_ZONE_ID=$(run_aws_command route53 list-hosted-zones --query 'HostedZones[0].Id' --output text 2>/dev/null | sed 's|/hostedzone/||')
          
          if [[ -n "$FIRST_ZONE_ID" ]] && run_aws_command route53 list-resource-record-sets --hosted-zone-id "$FIRST_ZONE_ID" >/dev/null 2>&1; then
            dokku_log_info1 "  route53:ListResourceRecordSets - can read DNS records"
          else
            dokku_log_info1 "  route53:ListResourceRecordSets - permission test failed"
          fi
          
          # Note: We can't easily test ChangeResourceRecordSets without making actual changes
          dokku_log_info1 "  ? route53:ChangeResourceRecordSets - will be tested during actual sync operations"
        fi
      else
        dokku_log_info1 "  ✗ route53:ListHostedZones - permission denied or API error"
      fi
      
      if [[ "$ROUTE53_SUCCESS" == "true" ]]; then
        echo
        dokku_log_info1 "Hosted Zones Discovery:"
        
        # Show available hosted zones in a nice format
        local ZONES_OUTPUT
        ZONES_OUTPUT=$(run_aws_command route53 list-hosted-zones --query 'HostedZones[].{Zone:Name,ID:Id,Records:ResourceRecordSetCount,Type:Config.PrivateZone}' --output table 2>/dev/null)
        
        if [[ -n "$ZONES_OUTPUT" ]]; then
          echo "$ZONES_OUTPUT"
        else
          # Fallback to simple text output
          dokku_log_info1 "Available zones:"
          run_aws_command route53 list-hosted-zones --query 'HostedZones[].Name' --output text 2>/dev/null | tr '\t' '\n' | sed 's/^/  /' || dokku_log_info1 "  No hosted zones found"
        fi
        
        echo
        # Show existing DNS records for Dokku domains
        dokku_log_info1 "Dokku DNS Records Discovery:"
        if init_provider_system >/dev/null 2>&1; then
          # Use the adapter system to discover existing domains
          dokku_log_info1 "  DNS discovery available through adapter system"
        else
          dokku_log_info1 "  No existing Dokku DNS records found"
        fi
      else
        echo
        dokku_log_fail "Route53 access failed. Please ensure your AWS credentials have the following permissions:

Required AWS Route53 Permissions:
  - route53:ListHostedZones        (list available DNS zones)
  - route53:ListResourceRecordSets (read existing DNS records)  
  - route53:ChangeResourceRecordSets (create/update/delete DNS records)

You can either:
1. Attach the AWS managed policy 'AmazonRoute53FullAccess'
2. Create a custom policy with the permissions above

Policy JSON example:
{
    \"Version\": \"2012-10-17\",
    \"Statement\": [
        {
            \"Effect\": \"Allow\",
            \"Action\": [
                \"route53:ListHostedZones\",
                \"route53:ListResourceRecordSets\",
                \"route53:ChangeResourceRecordSets\"
            ],
            \"Resource\": \"*\"
        }
    ]
}"
      fi
      ;;
      
    *)
      dokku_log_fail "Unknown provider: $PROVIDER"
      ;;
  esac
  
  echo
  dokku_log_info1 "DNS Provider Verification Complete"
  dokku_log_info1 "AWS Route53 is properly configured and ready to use"
  
  exit 0
}

service-providers-verify-cmd "$@"